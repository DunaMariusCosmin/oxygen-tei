<?xml version="1.0" encoding="UTF-8"?>
<project basedir="." default="documentation" name="oxygen-tei" xmlns:if="ant:if"
  xmlns:unless="ant:unless">
  
  <property name="echo.separator" value="***********************************************************"/>
<!-- Location of the release packages of P5 on SourceForge. -->
  <property name="SFP5" value="http://downloads.sourceforge.net/project/tei/TEI-P5-all"/> 
<!-- Location of the release packages of the TEI Stylesheets on SourceForge. -->
  <property name="SFXSL" value="http://downloads.sourceforge.net/project/tei/Stylesheets"/>
  
<!-- Where TEI releases of the plugin are available for download. -->
  <property name="sfReleaseLocation" value="http://sourceforge.net/projects/tei/files/tei-oxygen/"/>
  
<!--  Where the updateSite.oxygen files live on tei-c.org. -->
  <property name="p5VaultLocation" value="/var/www/vhosts/tei-c.org/projects/tei/web/Vault/P5/"/>
  
<!-- NOTE: THIS WILL BE CHANGED TO oxygen-tei AT SOME POINT PER COUNCIL DECISION. -->
  <property name="packageFilePrefix" value="teioxygen"/>
  
  <target name="documentation">
    <echo message="${echo.separator}"/>
    <echo>
THIS IS STILL IN DEVELOPMENT, INCOMPLETE AND UNTESTED, 
     
This build file is intended to build all or any of the versions of the 
TEI plugin for Oxygen. Currently these are:

syncro: Builds the plugin for the Syncro team to include with a release
        of Oxygen. This discovers the current stable versions of P5 
        and the Stylesheets, gets them, and builds with them.
        
bleeding: This is intended to run on the TEI's Jenkins build servers, and 
          creates a version of the plugin (with an accompanying 
          updateSite.oxygen file) based on the latest trunk builds of 
          P5 and the Stylesheets from the same build server.
          
release: This builds the plugin in the same way as the syncro job 
        (with the latest stable versions), but also offers to upload 
        the result to the TEI's SourceForge repo to become a release 
        of the TEI-maintained version of the plugin. This also creates 
        an updated updateSite.oxygen file, by retrieving the latest 
        updateSite.oxygen file from the tei-c.org site, and asks the 
        user to provide the new version number before creating a 
        new version of updateSite.oxygen. The builder (usually a 
        member of the TEI Council) is responsible for uploading that 
        file to tei-c.org.

stable: This is also intended to run on the TEI's Jenkins build servers, 
        and builds a version of the plugin which should be identical
        to "release", but is packaged with its own updateSite.oxygen
        file, to which TEI developers can subscribe for testing. The 
        purpose of this is so that we can regularly test how the 
        plugin would work if a release were created.
        
              
      More documentation coming...
      
    </echo>
    <echo message="${echo.separator}"/>
  </target>
  
  <target name="getStableVersionNums">
    <echo message="${echo.separator}"/>
    <echo message="Retrieving version numbers of current stable releases..."/>
    <get src="http://www.tei-c.org/Vault/P5/current/xml/tei/odd/VERSION" 
      dest="p5version" 
      usetimestamp="true"/>
    <loadfile property="tempP5Version" srcFile="p5version"/>
<!--   Trim this version number; the file often has a return or two in it. -->
    <script language="javascript">
      <![CDATA[ // 
        var before = new String(project.getProperty("tempP5Version"));
        project.setProperty("p5Version", before.replace(/\s/g, ""));
       ]]>
    </script>
    <exec executable="/bin/bash" outputproperty="stylesheetsVersion">
      <arg value="-c"/>
      <arg value='git ls-remote --tags https://github.com/TEIC/Stylesheets.git | egrep -o "([0-9]+\.)+[0-9]+" | sort -t . -k 1,1n -k 2,2n -k 3,3n | tail -n1'/>
    </exec>
    <echo message="P5 stable release version is: ${p5Version}"/>
    <echo message="Stylesheets stable release version is: ${stylesheetsVersion}"/>
    <echo message="${echo.separator}"/>
  </target>
  
  <target name="getStableVersions" depends="getStableVersionNums">
    <echo message="${echo.separator}"/>
    <property name="p5Zip" value="${SFP5}/tei-${p5Version}.zip"/>
    <echo message="Retrieving ${p5Zip}"/>
    <get src="${p5Zip}" dest="tei.zip" usetimestamp="true"/>
    <echo message="${echo.separator}"/>
    <property name="stylesheetsZip" value="${SFXSL}/tei-xsl-${stylesheetsVersion}.zip"/>
    <echo message="Retrieving ${stylesheetsZip}"/>
    <get src="${stylesheetsZip}" dest="xsl.zip" usetimestamp="true"/>
  </target>
  
  <target name="clean">
    <echo message="${echo.separator}"/>
    <echo message="Cleaning up from any previous build..."/>
    <delete dir="frameworks/tei/xml/tei/Test"/>
    <delete dir="frameworks/tei/xml/tei/custom/odd"/>
    <delete dir="frameworks/tei/xml/tei/custom/schema"/>
    <delete dir="frameworks/tei/xml/tei/odd"/>
    <delete dir="frameworks/tei/xml/tei/schema"/>
    <delete dir="frameworks/tei/xml/tei/stylesheet"/>
    <delete dir="frameworks/tei/xml/tei/xquery"/>
    <echo message="${echo.separator}"/>
  </target>
  
  <target name="unpackZips">
    <echo message="${echo.separator}"/>
    <echo message="Unpacking zip files of P5 and Stylesheets..."/>
    <unzip src="tei.zip" dest="frameworks/tei"/>
    <unzip src="xsl.zip" dest="frameworks/tei"/>
    <echo message="Removing unwanted bits of the downloaded packages..."/>
    <delete>
      <fileset dir="frameworks/tei/xml/tei/Exemplars" includes="*epub *html *pdf *tex *compiled"/>
    </delete>
    <delete>
      <fileset dir="frameworks/tei/xml/tei/odd" includes="p5subset.j* p5attlist.txt *.css p5odds-examples.*"/>
    </delete>
    <delete dir="frameworks/tei/doc"/>
    <delete dir="frameworks/tei/xml/tei/Test"/>
    <delete dir="frameworks/tei/xml/tei/odd/ReleaseNotes"/>
    <delete dir="frameworks/tei/xml/tei/odd/Source"/>
    <delete dir="frameworks/tei/xml/tei/odd/Exemplars"/>
    <delete dir="frameworks/tei/xml/tei/Exemplars"/>
    <delete dir="frameworks/tei/xml/tei/odd/Utilities"/>
    <delete dir="frameworks/tei/xml/tei/odd/webnav"/>
    <delete dir="frameworks/tei/xml/tei/xquery"/>
    <echo message="Moving a couple of things around..."/>
    <mkdir dir="frameworks/tei/templates/TEI P5"/>
    <move todir="frameworks/tei/templates/TEI P5">
      <fileset dir="frameworks/tei/xml/tei/custom/templates" includes="*"/>
    </move>
    <delete>
      <fileset dir="frameworks/tei/templates/TEI P5" includes="tei_*.doc.xml pom.xml"/>
    </delete>
    <echo message="${echo.separator}"/>
  </target>
  
  <target name="doBuild">
    <echo message="${echo.separator}"/>
    <echo message="Running the actual plugin build operation..."/>
    <ant antfile="build.xml" dir="frameworks/tei"/>
  </target>
  
  <target name="copyDist">
    <echo message="${echo.separator}"/>
    <property name="outputZip" value="${packageFilePrefix}-${p5Version}-${stylesheetsVersion}.zip"/>
    <echo message="Copying dist file to ${outputZip}..."/>
    <copy file="frameworks/tei/dist/tei.zip" tofile="${outputZip}"/>
    <echo message="The output file is: ${outputZip}."/>
    <echo message="${echo.separator}"/>
  </target>
  
  <target name="syncro" depends="getStableVersions, clean, unpackZips, doBuild, copyDist">
    <echo message="${echo.separator}"/>
    <echo message="Done!"/>
    <echo message="${echo.separator}"/>
  </target>
  
  
  
  <target name="createTeiOxygenUpdateFile">
    <echo message="${echo.separator}"/>
    <echo message="Retrieving the current version of the Oxygen update file."/>
    <get src="http://www.tei-c.org/release/oxygen/updateSite.oxygen" 
      dest="tei-c.org/updateSite.oxygen_OLD" 
      usetimestamp="true"/>
    <echo message="Finding out the last version number..."/>
<!--  NOTE: We have to do this at the command line because we can't assume that 
    saxon is in the path, and we don't want the hassle of redistributing saxon9he. -->
    <exec executable="/bin/bash">
      <arg value="-c"/>
      <arg value="saxon -s:tei-c.org/updateSite.oxygen_OLD -xsl:tei-c.org/updateSite.xsl"/>
    </exec>
    <loadfile property="lastVersion" srcFile="lastVersion"/>
    <echo message="Previous release version of this plugin was ${lastVersion}."/>
    <echo>
Figure out the new version based on these criteria:

If there is a new P5 version, increment the first digit 
   and set the second and third to zero.
   
If there is a new Stylesheets version, increment the 
   second digit and set the third to zero.
   
If there are only changes to the plugin code itself, 
   increment the third digit.
    </echo>
    <input message="Please input the new version number in x.y.z form."
      addproperty="newVersion"/>
    <condition property="goodVersionNumber">
      <matches pattern="[0-9]+\.[0-9]+\.[0-9]+" string="${newVersion}"/>
    </condition>
    <fail message="${newVersion} is not a valid version number." unless="goodVersionNumber"/>
    
    <property name="newZipFileName" value="${packageFilePrefix}-${newVersion}.zip"/>
    <property name="saxonCommand" value="saxon -s:tei-c.org/updateSite.oxygen_OLD -xsl:tei-c.org/updateSite.xsl -o:tei-c.org/updateSite.oxygen proposedVersionNumber=${newVersion} sfReleaseLocation=${sfReleaseLocation} newZipFileName=${newZipFileName}"/>
    <echo message="Running Saxon to create new updateSite.oxygen file:"/>
    <echo message="${saxonCommand}"/>
    <exec executable="/bin/bash" failonerror="true">
      <arg value="-c"/>
      <arg value="${saxonCommand}"/>
    </exec>
    <echo>
Created file tei-c.org/updateSite.oxygen, which will need to 
be uploaded to the tei-c.org site. You will have the option 
to do this later, but you can also do it manually.
    </echo>
    <echo message="${echo.separator}"/>
  </target>
  
  <target name="uploadToSourceForge">
    <!-- NOTE: This is uurrrgly, but we do want to make sure nothing gets uploaded to SF by 
    accident, and we don't try to upload without a user name. -->
    <input
      message="The build will now be uploaded to SourceForge. Are you sure you want to do this?"
      validargs="y,n"
      defaultvalue="n"
      addproperty="okToUpload"
    />
    <condition property="doUpload">
      <and>
        <isset property="okToUpload" />
        <equals arg1="${okToUpload}" arg2="y" />
      </and>
    </condition>
    <input if:true="${doUpload}" message="What is your SourceForge user name?"
      defaultvalue=""
      addproperty="sfUserName"/>
    <length property="sfUserNameLength" string="${sfUserName}"/>
    <condition property="readyToUpload">
      <and>
        <isset property="okToUpload" />
        <equals arg1="${okToUpload}" arg2="y" />
        <not>
          <equals arg1="${sfUserNameLength}" arg2="0" />
        </not>
      </and>
    </condition>
    <exec executable="/bin/bash" failonerror="true" if:true="${readyToUpload}">
      <arg value="-c"/>
      <!--      Used this commented-out version for local testing. -->
      <arg value="rsync -e ssh ${outputZip} mholmes@spud.hcmc.uvic.ca:/home/mholmes/Desktop/${outputZip}"/>
      <!--<arg value="rsync -e ssh ${outputZip} ${sfUserName},tei@frs.sourceforge.net:/home/frs/project/t/te/tei/tei-oxygen/${newZipFileName}"/>-->
    </exec>
    <echo message="ABORTED the upload to SourceForge." unless:true="${readyToUpload}"/>
    <echo message="User declined to proceed." unless:true="${doUpload}"/>
  </target>
  
  <target name="uploadOxygenUpdateFile">
    <echo message="${echo.separator}"/>
    <echo>
You now have the option of uploading the updateSite.oxygen file to the
tei-c.org server. You should proceed with this only if you're sure everything
has worked well. You will need shell access to tei-c.org.
    </echo>
    <input
      message="Are you sure you want to do this?"
      validargs="y,n"
      defaultvalue="n"
      addproperty="okToUploadToTei"
    />
    <condition property="doUploadToTei">
      <and>
        <isset property="okToUploadToTei" />
        <equals arg1="${okToUploadToTei}" arg2="y" />
      </and>
    </condition>
    <exec executable="/bin/bash" failonerror="true" if:true="${doUploadToTei}">
      <arg value="-c"/>
<!--     Commented-out version used for testing locally. -->
      <!--<arg value="rsync -e ssh tei-c.org/updateSite.oxygen mholmes@spud.hcmc.uvic.ca:/home/mholmes/Desktop/updateSite.oxygen"/>-->
      <arg value="rsync -e ssh tei-c.org/updateSite.oxygen tei@tei-c.org:${p5VaultLocation}/${p5Version}/oxygen/updateSite.oxygen"/>
    </exec>
    <echo message="${echo.separator}"/>
  </target>
  
  <target name="release" depends="getStableVersions, clean, unpackZips, doBuild, copyDist, createTeiOxygenUpdateFile, uploadToSourceForge, uploadOxygenUpdateFile">
    <echo message="${echo.separator}"/>
    <echo message="Done!"/>
    <echo message="${echo.separator}"/>
  </target>
  
  <target name="getLatestJenkinsBuildInformation">
    <property name="p5JenkinsBuild" value="../../../TEIP5/lastSuccessful/archive/"/>
    <property name="p5JenkinsVersionFile" value="${p5JenkinsBuild}/release/doc/tei-p5-doc/VERSION"/>
    <loadfile property="tempJenkinsP5Version" srcFile="${p5JenkinsVersionFile}"/>
    <!--   Trim this version number; the file often has a return or two in it. -->
    <script language="javascript">
      <![CDATA[ // 
        var before = new String(project.getProperty("tempP5JenkinsVersion"));
        project.setProperty("p5JenkinsVersion", before.replace(/\s/g, ""));
       ]]>
    </script>
    <echo message="Latest P5 version built on Jenkins is: ${p5JenkinsVersion}"/>
    
    <property name="stylesheetsJenkinsBuild" value="../../../Stylesheets/lastSuccessful/archive/"/>
    <property name="stylesheetsJenkinsVersionFile" value="${stylesheetsJenkinsBuild}/dist/doc/tei-xsl/VERSION"/>
    <loadfile property="tempJenkinsStylesheetsVersion" srcFile="${stylesheetsJenkinsVersionFile}"/>
    <!--   Trim this version number; the file often has a return or two in it. -->
    <script language="javascript">
      <![CDATA[ // 
        var before = new String(project.getProperty("tempJenkinsStylesheetsVersion"));
        project.setProperty("jenkinsStylesheetsVersion", before.replace(/\s/g, ""));
       ]]>
    </script>
    <echo message="Latest Stylesheets version built on Jenkins is: ${jenkinsStylesheetsVersion}"/>
  </target>
  
  <target name="bleeding" depends="getLatestJenkinsBuildInformation">
    <echo message="${echo.separator}"/>
    <echo message="Done!"/>
    <echo message="${echo.separator}"/>
  </target>
  
</project>
